// ex1 Почему код дает именно такие результаты?

var a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2 - префиксный инкремент, сначала a увеличилось и стало равно 2, потом присвоили в с
d = b++; alert(d);           // 1 - постфиксный инкремент, сначала присвоили в d, потом увеличили b
c = (2 + ++a); alert(c);      // 5 - префиксный инкремент, сначала a увеличилось и стало равно 3, потом выполнили сложение
d = (2 + b++); alert(d);      // 4 - постфиксный инкремент, сначала сложили, присволи в d, потом увеличили b
alert(a);                    // 3 - результат применения инкрементов выше
alert(b);                    // 3 - так же результат применения инкрементов выше

// ex2 Чему будет равен x? 
var a = 2;
var x = 1 + (a *= 2); // 5 - сначала выполняется в скобках умножение а на 2, потом сложение с 1

/* ex3 Объявить две целочисленные переменные — a и b и задать им произвольные начальные значения.
 Затем написать скрипт, который работает по следующему принципу:
если a и b положительные, вывести их разность;
если а и b отрицательные, вывести их произведение;
если а и b разных знаков, вывести их сумму;
Ноль можно считать положительным числом.
 */

let a = 2;
let b = -2;

function calcNumbers(a, b) {
    if (a >= 0 && b >= 0) {
        return a - b;
    }

    if (a < 0 && b < 0) {
        return a * b;
    }

    return a + b;
}

calcNumbers(a, b);

// ex4 Присвоить переменной а значение в промежутке [0..15]. 
// С помощью оператора switch организовать вывод чисел от a до 15.

let a = 11;

switch (a) {
    case 1:
        console.log('1');
    case 2:
        console.log('2 ');
    case 3:
        console.log('3 ');
    case 4:
        console.log('4 ');
    case 5:
        console.log('5 ');
    case 6:
        console.log('6 ');
    case 7:
        console.log('7 ');
    case 8:
        console.log('8 ');
    case 9:
        console.log('9 ');
    case 10:
        console.log('10 ');
    case 11:
        console.log('11 ');
    case 12:
        console.log('12 ');
    case 13:
        console.log('13 ');
    case 14:
        console.log('14 ');
    case 15:
        console.log('15 ');
}

//ex 5 Реализовать четыре основные арифметические операции в виде функций с двумя параметрами.
// Обязательно использовать оператор return.

function sum(a, b) {
    return a + b;
}

function diff(a, b) {
    return a - b;
}

function multiple(a, b) {
    return a * b;
}

function division(a, b) {
    return a / b;
}


// ex6 Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), 
// где arg1, arg2 — значения аргументов, operation — строка с названием операции. 
// В зависимости от переданного значения выполнить одну из арифметических операций 
// (использовать функции из пункта 5) и вернуть полученное значение (применить switch).

func mathOperation(a, b, operation) {
    switch (operation) {
        case 'sum':
            return sum(a, b);
        case 'diff':
            return diff(a, b);
        case 'multiple':
            return multiple(a, b);
        case division:
            return division(a, b);
    }
}



// ex7 * Сравнить null и 0. Объяснить результат.


/* операторы сравнения > и < используют абстрактный алгоритм сравнения для отношений.
В алгоритме используется преобразование toNumber, Null преобразовывается в +0*/
null > 0; // false

/* оператор == использует абстрактный алгоритм сравнения для равенств,
 проходя по которому мы возвращаем значение по умолчанию! -  false */
null == 0; // false

/* по спецификации языка, на очень высоком уровне оператор >=: работает так:
Если null < 0 принимает значение false, то null >= 0 принимает значение true */
null >= 0; // true

// ex 8* С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val — заданное число, pow –— степень.
function power(value, pow) {
    if (pow == 0) {
        return 1;
    }
    return value * power(value, pow - 1);
}